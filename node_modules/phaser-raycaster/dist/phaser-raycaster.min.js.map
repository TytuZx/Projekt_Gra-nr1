{"version":3,"sources":["webpack://PhaserRaycaster/webpack/universalModuleDefinition","webpack://PhaserRaycaster/webpack/bootstrap","webpack://PhaserRaycaster/./src/ray/matter-physics-methods.js","webpack://PhaserRaycaster/./src/ray/range.js","webpack://PhaserRaycaster/./src/ray/overlap.js","webpack://PhaserRaycaster/./src/ray/angle.js","webpack://PhaserRaycaster/./src/ray/cone.js","webpack://PhaserRaycaster/./src/main.js","webpack://PhaserRaycaster/./src/raycaster-core.js","webpack://PhaserRaycaster/./src/map/map-core.js","webpack://PhaserRaycaster/./src/map/config.js","webpack://PhaserRaycaster/./src/map/map-rectangle-methods.js","webpack://PhaserRaycaster/./src/map/map-line-methods.js","webpack://PhaserRaycaster/./src/map/map-polygon-methods.js","webpack://PhaserRaycaster/./src/map/map-circle-methods.js","webpack://PhaserRaycaster/./src/map/map-container-methods.js","webpack://PhaserRaycaster/./src/map/map-tilemap-methods.js","webpack://PhaserRaycaster/./src/map/map-matterBody-methods.js","webpack://PhaserRaycaster/./src/map/segmentsCount.js","webpack://PhaserRaycaster/./src/map/boundingBox.js","webpack://PhaserRaycaster/./src/ray/ray-core.js","webpack://PhaserRaycaster/./src/ray/config.js","webpack://PhaserRaycaster/./src/ray/stats.js","webpack://PhaserRaycaster/./src/ray/ray.js","webpack://PhaserRaycaster/./src/ray/origin.js","webpack://PhaserRaycaster/./src/ray/cast.js","webpack://PhaserRaycaster/./src/ray/castCircle.js","webpack://PhaserRaycaster/./src/ray/castCone.js","webpack://PhaserRaycaster/./src/ray/slice.js","webpack://PhaserRaycaster/./src/ray/enablePhysics.js","webpack://PhaserRaycaster/./src/ray/debug.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setCollisionCategory","this","body","collisionFilter","category","setCollisionGroup","group","setCollidesWith","categories","flags","Array","isArray","length","mask","setOnCollide","callback","self","onCollideCallback","collisionInfo","rayCollided","processOverlap","setOnCollideEnd","onCollideEndCallback","setOnCollideActive","onCollideActiveCallback","bodyA","label","bodyB","undefined","onCollideWith","id","setOnCollideWith","func","src","setRayRange","rayRange","Phaser","Math","MAX_SAFE_INTEGER","Geom","Line","SetToAngle","_ray","origin","x","y","angle","setDetectionRange","detectionRange","detectionRangeCircle","setTo","setCollisionRange","collisionRange","oldRangeMax","collisionCircle","setRadius","bodyType","bounds","_raycaster","boundingBox","scene","matter","set","shape","type","rectangle","centerX","centerY","width","height","circleRadius","isStatic","setCircle","boundsInRange","objectBounds","raycasterMap","getBoundingBox","data","Intersects","CircleToRectangle","overlap","objects","targets","overlapCircle","Circle","query","collides","getMatterBodies","testMatterOverlap","push","bodies","physics","overlapCirc","hitbox","isCircle","position","halfWidth","Rectangle","testOverlap","gameObject","CircleToCircle","testArcadeOverlap","object1","object2","obj1","obj2","target","slicedIntersections","slice","TriangleToCircle","RectangleToTriangle","parts","splice","part","pointA","vertices","pointB","segment","TriangleToLine","Triangle","ContainsPoint","getPointA","getPointB","setAngle","Angle","Normalize","setAngleDeg","DegToRad","setCone","cone","setConeDeg","PhaserRaycaster","systems","sys","settings","isBooted","events","once","boot","register","PluginManager","eventEmitter","on","start","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","destroy","test","console","log","time","delta","createRaycaster","options","_Raycaster","constructor","require","Raycaster","version","graphics","debugOptions","enabled","maps","rays","ray","rayPoint","mapPoint","mapSegment","mapBoundingBox","_stats","mappedObjects","total","static","dynamic","rectangleMaps","polygonMaps","circleMaps","lineMaps","containerMaps","tilemapMaps","matterMaps","sortedPoints","mapSegmentCount","world","walls","top","bottom","setOptions","autoUpdate","add","lineStyle","color","fillStyle","setDepth","debug","assign","mapGameObjects","setBoundingBox","points","segments","Point","left","right","segmentCount","includes","config","option","map","Map","setDataEnabled","removeMappedObjects","index","indexOf","enableMaps","active","disableMaps","dynamicMaps","mapppedObject","updateMap","drawDebug","createRay","Ray","getStats","clear","strokeRectShape","getSegments","strokeLineShape","getPoints","point","fillPoint","raycaster","circle","_points","_segments","line","polygon","arc","container","tilemap","matterBody","setSegmentCount","collisionTiles","setCollisionTiles","setOrigin","forceConvex","forceVerticesMapping","getTopLeft","getTopRight","getBottomRight","getBottomLeft","offset","displayWidth","originX","displayHeight","originY","geom","rotation","vectorA","scaleX","scaleY","Length","vectorB","vector","closePath","last","rayA","rayB","cB","rayLength","sqrt","pow","radius","dAngle","asin","newPoints","getCircles","tempRay","list","child","iterate","childPoints","iLength","childA","mapA","j","jLength","childB","mapB","RectangleToRectangle","getBounds","segmentA","segmentB","intersection","LineToLine","Distance","Between","x1","y1","x2","y2","LineToCircle","horizontal","horizontals","verticals","layer","row","tile","upperEdge","leftEdge","vertical","tileWidth","tileHeight","verticalsLastColumn","column","filter","horizontalSegment","tiles","scale","generateBounds","bodyItem","find","segmentIndex","findIndex","closingSegment","composite","min","max","count","ignoreNotIntersectedRays","round","autoSlice","intersections","method","testedMappedObjects","hitMappedObjects","setRay","cast","castCircle","castCone","enablePhysics","angleDeg","coneDeg","closestIntersection","closestSegment","closestObject","closestDistance","internal","startTime","performance","now","stats","GetLineToRectangle","distance","result","_boundingBox","Equals","isTangent","circleIntersections","GetLineToCircle","originalAngle","rayTargets","testedObjects","objectB","sort","a","b","previousTarget","castSides","roundedTarget","intersectionA","intersectionB","minAngle","maxAngle","angleOffsetDeg","RadToDeg","ShortestBetween","abs","closed","slices","isSensor","ignoreGravity","existing","setAllowGravity","setImmovable"],"mappings":"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","file":"phaser-raycaster.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PhaserRaycaster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserRaycaster\"] = factory();\n\telse\n\t\troot[\"PhaserRaycaster\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/*Matter physics methods for ray body*/\n/**\n * Sets the collision category of this ray's Matter Body. This number must be a power of two between 2^0 (= 1) and 2^31.\n * Two bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision\n * categories are included in their collision masks (see {@link #setCollidesWith}).\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique category bitfield.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionCategory(value) {\n    this.body.collisionFilter.category = value;\n\n    return this;\n};\n\n/**\n * Sets the collision group of this ray's Matter Body. If this is zero or two Matter Bodies have different values,\n * they will collide according to the usual rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}).\n * If two Matter Bodies have the same positive value, they will always collide; if they have the same negative value,\n * they will never collide.\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique group index.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionGroup(value) {\n    this.body.collisionFilter.group = value;\n\n    return this;\n};\n\n/**\n * Sets the collision mask for this ray's Matter Body. Two Matter Bodies with different collision groups will only\n * collide if each one includes the other's category in its mask based on a bitwise AND, i.e. `(categoryA & maskB) !== 0`\n * and `(categoryB & maskA) !== 0` are both true.*\n *\n * @method Raycaster.Ray#setCollidesWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(number|number[])} categories - A unique category bitfield, or an array of them.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\n\nexport function setCollidesWith(categories) {\n    var flags = 0;\n\n    if (!Array.isArray(categories))\n    {\n        flags = categories;\n    }\n    else\n    {\n        for (var i = 0; i < categories.length; i++)\n        {\n            flags |= categories[i];\n        }\n    }\n\n    this.body.collisionFilter.mask = flags;\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollide\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body starts colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollide(callback) {\n    let self = this;\n    this.body.onCollideCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(collisionInfo);\n        }\n    };\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideEnd\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body stops colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideEnd(callback) {\n    this.body.onCollideEndCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            collisionInfo.rayCollided = false;\n            callback(collisionInfo);\n        }\n    }\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideActive\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke for the duration of this body colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideActive(callback) {\n    let self = this;\n    let func = function(collisionInfo) {\n        if(self.processOverlap(collisionInfo)) {\n            let body = collisionInfo.bodyA.label === 'phaser-raycaster-ray-body' ? collisionInfo.bodyB : collisionInfo.bodyA;\n\n            if(collisionInfo.rayCollided !== true) {\n                collisionInfo.rayCollided = true;\n                if(self.body.onCollideCallback) {\n                    self.body.onCollideCallback(collisionInfo);\n                }\n\n                if(self.body.onCollideWith !== undefined && self.body.onCollideWith[body.id]) {\n                    self.body.onCollideWith[body.id](body, collisionInfo);\n                }\n            }\n            if(callback)\n                callback(collisionInfo);\n        }\n        else {\n            if(self.body.onCollideEndCallback && collisionInfo.rayCollided === true) {\n                self.body.onCollideEndCallback(collisionInfo);\n            }\n        }\n    }\n\n    this.body.onCollideActiveCallback = func;\n\n    return this;\n}\n\n/**\n * The callback is sent a reference to the other body, along with a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(MatterJS.Body|MatterJS.Body[])} body - The body, or an array of bodies, to test for collisions with.\n * @param {function} callback - The callback to invoke when this body collides with the given body or bodies.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideWith(body, callback) {\n    let self = this;\n    let func = function(body, collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(body, collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(body, collisionInfo);\n        }\n    }\n\n    if (!Array.isArray(body))\n    {\n        body = [ body ];\n    }\n\n    for (var i = 0; i < body.length; i++)\n    {\n        var src = (body[i].hasOwnProperty('body')) ? body[i].body : body[i];\n\n        this.body.setOnCollideWith(src, func);\n    }\n\n    return this;\n};\n","/**\n * Set ray's range.\n *\n * @method Raycaster.Ray#setRayRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} [rayRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRayRange(rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.rayRange = rayRange;\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's maximum detection range. Objects outside detection range won't be tested.\n * Ray tests all objects when set to 0.\n *\n * @method Raycaster.Ray#setDetectionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} [detectionRange = 0] - Maximum distance between ray's position and tested objects bounding boxes.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setDetectionRange(detectionRange = 0) {\n    this.detectionRange = detectionRange;\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    return this;\n}\n\n/**\n * Set ray's field of view maximum collision range. Objects outside collision range won't be tested by {@link Raycaster.Ray#overlap Raycaster.Ray.overlap} method.\n * Determines ray's physics body radius.\n *\n * @method Raycaster.Ray#setCollisionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {integer} [collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's collision range and physics body radius.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionRange(collisionRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    let oldRangeMax = this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER;\n    this.collisionRange = collisionRange;\n    this.collisionCircle.setRadius(this.collisionRange);\n\n    if(this.bodyType === 'matter') {\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'rectangle',\n                    x: bounds.rectangle.centerX,\n                    y: bounds.rectangle.centerY,\n                    width: bounds.rectangle.width,\n                    height: bounds.rectangle.height,\n                    circleRadius:0\n                }\n            });\n        }\n        else if(oldRangeMax) {\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'circle',\n                    x: this.collisionCircle.x,\n                    y: this.collisionCircle.y\n                },\n                circleRadius: this.collisionRange,\n                isStatic: false\n            });\n        }\n        else {\n            this.collisionCircle.setRadius(this.collisionRange);\n        }\n        this._raycaster.scene.matter.body.set(this.body, 'circleRadius', this.collisionRange)\n    }\n    else if(this.bodyType === 'arcade') {\n        this.body.setCircle(this.collisionRange);\n    }\n\n    return this;\n}\n\n/**\n * Test if object's bounding box is in ray's detection range.\n *\n * @method Raycaster.Ray#boundsInRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} object - Tested object\n * @param {(Phaser.Geom.Rectangle|boolean)} [bounds = false] - Tested object's bounds. If not passed bounds will be generated automatically.\n *\n * @return {boolean} Information if object is in ray's detection range.\n */\nexport function boundsInRange(object, bounds = false) {\n    if(!this.detectionRange)\n        return true;\n\n    let objectBounds;\n    if(bounds)\n        objectBounds = bounds;\n    else {\n        if(object.type === 'body' || object.type === 'composite')\n            objectBounds = object.raycasterMap.getBoundingBox();\n        else\n            objectBounds = object.data.get('raycasterMap').getBoundingBox();\n    }\n\n    if(Phaser.Geom.Intersects.CircleToRectangle(this.detectionRangeCircle, objectBounds))\n        return true;\n\n    return false;\n}\n","/**\n * Get game objects overlaping field of view.\n *\n * @method Raycaster.Ray#overlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object|object[]} [objects] - Game object / array off game objects to test.\n *\n * @return {object[]} Array of game objects that overlaps with field of view.\n */\nexport function overlap(objects) {\n    let targets = [];\n    let overlapCircle = new Phaser.Geom.Circle(this.origin.x, this.origin.y, this.collisionRange);\n\n    //matter physics\n    if(this.bodyType === 'matter') {\n        let isCollisionInfo = false;\n        if(objects === undefined) {\n            objects = this._raycaster.scene.matter.query.collides(this.body, this._raycaster.scene.matter.getMatterBodies());\n\n            for(let object of objects) {   \n                let body = object.bodyA === this.body ? object.bodyB : object.bodyA;\n\n                if(this.testMatterOverlap(body))\n                    targets.push(body);\n            }\n        }\n        //get object's body\n        else {\n            if(!Array.isArray(objects))\n                objects = [objects];\n            \n            for(let object of objects) {\n                if(object === this.body)\n                    continue;\n    \n                if(this.testMatterOverlap(object))\n                    targets.push(object);\n            }\n        }\n    }\n    //arcade physics\n    else {\n        let bodies = false;\n        //get bodies in range\n        if(objects === undefined) {\n            objects = this._raycaster.scene.physics.overlapCirc(this.origin.x, this.origin.y, this.collisionRange, true, true);\n            bodies = true;\n        }\n        //get object's body\n        else if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n        //if objects are bodies\n        if(bodies) {\n            for(let body of objects) {\n                if(body === this.body)\n                    continue;\n            \n                let hitbox;\n                //get physics body hitbox\n                if(body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(body.position.x + body.halfWidth, body.position.y + body.halfWidth, body.halfWidth);\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(body.x, body.y, body.width, body.height);\n                }\n\n                if(this.testOverlap(hitbox))\n                    targets.push(body.gameObject);\n            }\n        }\n        //if objects are game objects\n        else {\n            for(let object of objects) {\n                if(object.body === undefined)\n                    continue;\n\n                let hitbox;\n                //get physics body hitbox\n                if(object.body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(object.body.position.x + object.body.halfWidth, object.body.position.y + object.body.halfWidth, object.body.halfWidth);\n                    if(!Phaser.Geom.Intersects.CircleToCircle(overlapCircle, hitbox))\n                        continue;\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(object.body.x, object.body.y, object.body.width, object.body.height);\n                    if(!Phaser.Geom.Intersects.CircleToRectangle(overlapCircle, hitbox))\n                        continue;\n                }\n\n                if(this.testArcadeOverlap(hitbox))\n                    targets.push(object);\n            }\n        }\n    }\n\n    return targets;\n}\n\n/**\n * Process callback for physics collider / overlap.\n *\n * @method Raycaster.Ray#processOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object} object1 - Game object or matter body passed by collider / overlap or matter CollisionInfo object.\n * @param {object} object2 - Game object or matter body passed by collider / overlap. Ignored if matter CollisionInfo object was passed as first argument.\n *\n * @return {boolean} Return true if game object is overlapping ray's field of view.\n */\nexport function processOverlap(object1, object2) {\n    let obj1, obj2, target;\n    //check if it's matter collisionInfo object\n    if(object1.bodyA !== undefined && object1.bodyB !== undefined) {\n        obj1 = object1.bodyA;\n        obj2 = object1.bodyB;\n    }\n    else {\n        obj1 = object1;\n        obj2 = object2;\n    }\n\n    if(obj1._ray !== undefined && obj1._ray === this)\n        target = obj2;\n    else if(obj2._ray !== undefined && obj2._ray === this)\n        target = obj1;\n    else\n        return false;\n\n    return (this.overlap(target).length > 0);\n}   \n\n/**\n * Test if hitbox overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testArcadeOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.8.0\n *\n * @param {object} hitbox - Game object's hitbox generated inside {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @return {boolean} True if hitbox overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testArcadeOverlap(hitbox) {\n    let overlap = false;\n\n    //iterate through field of view slices to check collisions with target\n    for(let slice of this.slicedIntersections) {\n        //if hitbox is a circle\n        if(hitbox.type == 0) {\n            overlap = Phaser.Geom.Intersects.TriangleToCircle(slice, hitbox);\n        }\n        //if hitbox is a rectangle\n        else {\n            overlap = Phaser.Geom.Intersects.RectangleToTriangle(hitbox, slice);\n        }\n\n        if(overlap) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Test if matter body overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testMatterOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.9.0\n *\n * @param {object} body - Matter body.\n *\n * @return {boolean} True if body overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testMatterOverlap(object) {\n    let body;\n\n    if(object.type === 'body')\n        body = object;\n    else if(object.body !== undefined)\n        body = object.body;\n    else\n        return false;\n\n    //if body is concave, ignore convex body\n    let parts = body.parts.length > 1 ? body.parts.splice(1) : body.parts;\n    //iterate through bodies\n    for(let part of parts) {\n        let pointA = part.vertices[0];\n\n        for(let i = 1, length = part.vertices.length; i < length; i++) {\n            let pointB = part.vertices[i];\n            let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n\n            //iterate through field of view slices to check collisions with target\n            for(let slice of this.slicedIntersections) {\n                let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n                //additional checking if slice contain segment's points due to TriangleToLine bug.\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointA());\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointB());\n\n                if(overlap) {\n                    return true;\n                }\n            }\n            pointA = pointB;\n        }\n\n        //closing segment\n        let segment = new Phaser.Geom.Line(part.vertices[part.vertices.length - 1].x, part.vertices[part.vertices.length - 1].y, part.vertices[0].x, part.vertices[0].y);\n         //iterate through field of view slices to check collisions with target\n        for(let slice of this.slicedIntersections) {\n            let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n\n            if(overlap) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n","/**\n * Set ray's angle (direction) in radians.\n *\n * @method Raycaster.Ray#setAngle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {float} [angle = 0] - Ray's angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngle(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's angle (direction) in degrees.\n *\n * @method Raycaster.Ray#setAngleDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.1\n *\n * @param {float} [angle = 0] - Ray's angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngleDeg(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(angle));\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n","/**\n * Set ray's cone angle (width) in radians.\n *\n * @method Raycaster.Ray#setCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {float} [cone = 0] - Ray's cone angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCone(cone = 0) {\n    this.cone = cone;\n    return this;\n}\n\n/**\n * Set ray's cone angle (width) in degrees.\n *\n * @method Raycaster.Ray#setConeDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {float} [cone = 0] - Ray's cone angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setConeDeg(cone = 0) {\n    this.cone = Phaser.Math.DegToRad(cone);\n    return this;\n}\n","var PhaserRaycaster = function (scene)\n{\n    //The Scene that owns this plugin\n    this.scene = scene;\n\n    this.systems = scene.sys;\n\n    if (!scene.sys.settings.isBooted)\n    {\n        scene.sys.events.once('boot', this.boot, this);\n    }\n};\n\n//Static function called by the PluginFile Loader.\nPhaserRaycaster.register = function (PluginManager)\n{\n    //  Register this plugin with the PluginManager, so it can be added to Scenes.\n\n    //  The first argument is the name this plugin will be known as in the PluginManager. It should not conflict with already registered plugins.\n    //  The second argument is a reference to the plugin object, which will be instantiated by the PluginManager when the Scene boots.\n    //  The third argument is the local mapping. This will make the plugin available under `this.sys.base` and also `this.base` from a Scene if\n    //  it has an entry in the InjectionMap.\n    PluginManager.register('PhaserRaycaster', PhaserRaycaster, 'base');\n};\n\nPhaserRaycaster.prototype = {\n\n    //  Called when the Plugin is booted by the PluginManager.\n    //  If you need to reference other systems in the Scene (like the Loader or DisplayList) then set-up those references now, not in the constructor.\n    boot: function ()\n    {\n        var eventEmitter = this.systems.events;\n\n        //  Listening to the following events is entirely optional, although we would recommend cleanly shutting down and destroying at least.\n        //  If you don't need any of these events then remove the listeners and the relevant methods too.\n\n        eventEmitter.on('start', this.start, this);\n\n        eventEmitter.on('preupdate', this.preUpdate, this);\n        eventEmitter.on('update', this.update, this);\n        eventEmitter.on('postupdate', this.postUpdate, this);\n\n        eventEmitter.on('pause', this.pause, this);\n        eventEmitter.on('resume', this.resume, this);\n\n        eventEmitter.on('sleep', this.sleep, this);\n        eventEmitter.on('wake', this.wake, this);\n\n        eventEmitter.on('shutdown', this.shutdown, this);\n        eventEmitter.on('destroy', this.destroy, this);\n    },\n\n    //A test method.\n    test: function (name)\n    {\n        console.log('RaycasterPlugin says hello ' + name + '!');\n    },\n\n    //Called when a Scene is started by the SceneManager. The Scene is now active, visible and running.\n    start: function ()\n    {\n    },\n\n    //Called every Scene step - phase 1\n    preUpdate: function (time, delta)\n    {\n    },\n\n    //Called every Scene step - phase 2\n    update: function (time, delta)\n    {\n    },\n\n    //Called every Scene step - phase 3\n    postUpdate: function (time, delta)\n    {\n    },\n\n    //Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\n    pause: function ()\n    {\n    },\n\n    //Called when a Scene is resumed from a paused state.\n    resume: function ()\n    {\n    },\n\n    //Called when a Scene is put to sleep. A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\n    sleep: function ()\n    {\n    },\n\n    //Called when a Scene is woken from a sleeping state.\n    wake: function ()\n    {\n    },\n\n    //Called when a Scene shuts down, it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\n    shutdown: function ()\n    {\n    },\n\n    //Called when a Scene is destroyed by the Scene Manager. There is no coming back from a destroyed Scene, so clear up all resources here.\n    destroy: function ()\n    {\n        this.shutdown();\n\n        this.scene = undefined;\n    },\n\n    //Create Raycaster object\n    createRaycaster: function(options = {}) {\n        options.scene = this.scene;\n        return new this._Raycaster(options);\n    }\n\n};\n\nPhaserRaycaster.prototype.constructor = PhaserRaycaster;\nPhaserRaycaster.prototype._Raycaster = require('./raycaster-core.js').Raycaster;\n\n//Make sure you export the plugin for webpack to expose\n\nmodule.exports = PhaserRaycaster;\n","/**\r\n* @author       Marcin Walczak <contact@marcin-walczak.pl>\r\n* @copyright    2021 Marcin Walczak\r\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\r\n*/\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Raycaster class responsible for creating ray objects and managing mapped objects.\r\n * \r\n * @namespace Raycaster\r\n * @class Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} [options] - Raycaster's configuration options. May include:\r\n * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n * @param {integer} [options.mapSegmentCount = 0] - Number of segments of circle maps. If set to 0, map will be teste\r\n * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\r\n * @param {boolean} [options.autoUpdate = true] - If set true, automatically update dynamic maps on scene update event.\r\n * @param {bool|object} [options.debug] - Enable debug mode or configure it {@link Raycaster#debugOptions debugOptions}.\r\n */\r\nexport function Raycaster(options) {\r\n    /**\r\n    * Plugin version.\r\n    *\r\n    * @name Raycaster#version\r\n    * @type {string}\r\n    * @readonly\r\n    * @since 0.6.0\r\n    */\r\n    this.version = '0.10.1';\r\n    /**\r\n    * Raycaster's scene\r\n    *\r\n    * @name Raycaster#scene\r\n    * @type {Phaser.Scene}\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.scene;\r\n    /**\r\n    * Raycaster's graphics object used for debug\r\n    *\r\n    * @name Raycaster#graphics\r\n    * @type {Phaser.GameObjects.Graphics}\r\n    * @private\r\n    * @since 0.10.0\r\n    */\r\n    this.graphics;\r\n    /**\r\n    * Raycaster's debug config\r\n    *\r\n    * @name Raycaster#debugOptions\r\n    * @type {Object}\r\n    * @since 0.10.0\r\n    * \r\n    * @property {bool} [enable = false] Enable debug mode\r\n    * @property {bool} [maps = true] - Enable maps debug\r\n    * @param {bool} [rays = true] - Enable rays debug\r\n    * @property {bool} graphics - Debug graphics options\r\n    * @property {bool|number} [graphics.ray = 0x00ff00] - Debug ray color. Set false to disable.\r\n    * @property {bool|number} [graphics.rayPoint = 0xff00ff] - Debug ray point color. Set false to disable.\r\n    * @property {bool|number} [graphics.mapPoint = 0x00ffff] - debug map point color. Set false to disable.\r\n    * @property {bool|number} [graphics.mapSegment = 0x0000ff] - Debug map segment color. Set false to disable.\r\n    * @property {bool|number} [graphics.mapBoundingBox = 0xff0000] - Debug map bounding box color. Set false to disable.\r\n    */\r\n    this.debugOptions = {\r\n        enabled: false,\r\n        maps: true,\r\n        rays: true,\r\n        graphics: {\r\n            ray: 0x00ff00,\r\n            rayPoint: 0xff00ff,\r\n            mapPoint: 0x00ffff,\r\n            mapSegment: 0x0000ff,\r\n            mapBoundingBox: 0xff0000\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Raycaster statistics.\r\n    *\r\n    * @name Raycaster.Raycaster#_stats\r\n    * @type {object}\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @property {object} mappedObjects Mapped objects statistics.\r\n    * @property {number} mappedObjects.total Mapped objects total.\r\n    * @property {number} mappedObjects.static Static maps.\r\n    * @property {number} mappedObjects.dynamic Dynamic maps.\r\n    * @property {number} mappedObjects.rectangleMaps Rectangle maps.\r\n    * @property {number} mappedObjects.polygonMaps Polygon maps.\r\n    * @property {number} mappedObjects.circleMaps Circle maps.\r\n    * @property {number} mappedObjects.lineMaps Line maps.\r\n    * @property {number} mappedObjects.containerMaps Container maps.\r\n    * @property {number} mappedObjects.tilemapMaps Tilemap maps.\r\n    * @property {number} mappedObjects.matterMaps Matter body maps.\r\n    */\r\n     this._stats = {\r\n        mappedObjects: {\r\n            total: 0,\r\n            static: 0,\r\n            dynamic: 0,\r\n            rectangleMaps: 0,\r\n            polygonMaps: 0,\r\n            circleMaps: 0,\r\n            lineMaps: 0,\r\n            containerMaps: 0,\r\n            tilemapMaps: 0,\r\n            matterMaps: 0\r\n        }\r\n     };\r\n\r\n    /**\r\n    * Raycaster's bounding box.\r\n    *\r\n    * @name Raycaster#boundingBox\r\n    * @type {Phaser.Geom.Rectangle}\r\n    * @default false\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.boundingBox = false;\r\n    /**\r\n    * Array of mapped game objects.\r\n    *\r\n    * @name Raycaster#mappedObjects\r\n    * @type {object[]}\r\n    * @since 0.6.0\r\n    */\r\n    this.mappedObjects = [];\r\n    this.sortedPoints = [];\r\n    /**\r\n    * Number of segments of circle maps.\r\n    *\r\n    * @name Raycaster#mapSegmentCount\r\n    * @type {integer}\r\n    * @default 0\r\n    * @since 0.6.0\r\n    */\r\n    this.mapSegmentCount = 0;\r\n\r\n    if(options !== undefined) {\r\n        if(options.boundingBox === undefined && options.scene !== undefined) {\r\n            if(options.scene.physics !== undefined)\r\n                options.boundingBox = options.scene.physics.world.bounds;\r\n            else if(options.scene.matter !== undefined) {\r\n                let walls = options.scene.matter.world.walls;\r\n\r\n                if(walls.top !== null) {\r\n                    options.boundingBox = new Phaser.Geom.Rectangle(\r\n                        walls.top.vertices[3].x,\r\n                        walls.top.vertices[3].y,\r\n                        walls.bottom.vertices[1].x - walls.top.vertices[3].x,\r\n                        walls.bottom.vertices[1].y - walls.top.vertices[3].y\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setOptions(options);\r\n\r\n        if(options.autoUpdate === undefined || options.autoUpdate)\r\n            //automatically update event\r\n            this.scene.events.on('update', this.update.bind(this));\r\n    }\r\n    else\r\n        //automatically update event\r\n        this.scene.events.on('update', this.update.bind(this));\r\n\r\n    return this;\r\n}\r\n\r\nRaycaster.prototype = {\r\n    /**\r\n    * Configure raycaster.\r\n    *\r\n    * @method Raycaster#setOptions\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Raycaster's congfiguration options. May include:\r\n    * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n    * @param {integer} [options.mapSegmentCount = 0] - Number of segments of circle maps.\r\n    * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n    * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\r\n    * @param {bool|object} [options.debug] - Enable debug mode or cofigure {@link Raycaster#debugOptions debugOptions}.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setOptions: function(options) {\r\n        if(options.scene !== undefined) {\r\n            this.scene = options.scene;\r\n            this.graphics =  this.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\r\n            this.graphics.setDepth(999);\r\n        }\r\n\r\n        if(options.debug !== undefined && options.debug !== false) {\r\n            this.debugOptions.enabled = true;\r\n\r\n            if(typeof options.debug === 'object')\r\n                Object.assign(this.debugOptions, options.debug);\r\n        }\r\n            \r\n\r\n        if(options.mapSegmentCount !== undefined)\r\n            this.mapSegmentCount = options.mapSegmentCount;\r\n\r\n        if(options.objects !== undefined)\r\n            this.mapGameObjects(options.objects);\r\n\r\n        if(options.boundingBox !== undefined)\r\n            this.setBoundingBox(options.boundingBox.x, options.boundingBox.y, options.boundingBox.width, options.boundingBox.height)\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Set Raycatser's bounding box.\r\n    *\r\n    * @method Raycaster#setBoundingBox\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {integer} x - The X coordinate of the top left corner of bounding box.\r\n    * @param {integer} y - The Y coordinate of the top left corner of bounding box.\r\n    * @param {integer} width - The width of bounding box.\r\n    * @param {integer} height - The height of bounding box.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setBoundingBox: function(x, y, width, height) {\r\n        this.boundingBox = {\r\n            rectangle: new Phaser.Geom.Rectangle(x, y, width, height),\r\n            points: [],\r\n            segments: []\r\n        }\r\n        //set points\r\n        let points = [\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.bottom),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.bottom)\r\n        ];\r\n\r\n        this.boundingBox.points = points;\r\n\r\n        //set segments\r\n        for(let i = 0, length = this.boundingBox.points.length; i < length; i++) {\r\n            if(i+1 < length)\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n            else\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n        }\r\n    },\r\n\r\n    /**\r\n    * Map game objects\r\n    *\r\n    * @method Raycaster#mapGameObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object|object[]} objects - Game object / matter body or array of game objects / matter bodies to map.\r\n    * @param {boolean} [dynamic = false] - {@link Raycaster.Map Raycaster.Map} dynamic flag (determines map will be updated automatically).\r\n    * @param {object} [options] - Additional options for {@link Raycaster.Map Raycaster.Map}\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    mapGameObjects: function(objects, dynamic = false, options = {}) {\r\n        options.dynamic = dynamic;\r\n        options.segmentCount = (options.segmentCount !== undefined) ? options.segmentCount : this.segmentCount;\r\n\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            if(this.mappedObjects.includes(object))\r\n                continue;\r\n\r\n            let config = {};\r\n            for(let option in options) {\r\n                config[option] = options[option];\r\n            }\r\n            config.object = object;\r\n            \r\n            let map = new this.Map(config, this);\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                object.raycasterMap = map;\r\n            }\r\n            else if(!object.data) {\r\n                object.setDataEnabled();\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n            else {\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n\r\n            this.mappedObjects.push(object);\r\n\r\n            //update stats\r\n            if(object.dynamic)\r\n                this._stats.mappedObjects.dynamic++;\r\n            else\r\n                this._stats.mappedObjects.static++;\r\n            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps++;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps++;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps++;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps++;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps++;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps++;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Remove game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#removeMappedObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be removed.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    removeMappedObjects: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n\r\n        for(let object of objects) {\r\n            let index = this.mappedObjects.indexOf(object);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1);\r\n            \r\n            //update stats\r\n            if(object.dynamic)\r\n                this._stats.mappedObjects.dynamic--;\r\n            else\r\n                this._stats.mappedObjects.static--;\r\n            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps--;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps--;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps--;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps--;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps--;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps--;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Enable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#enableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be enabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    enableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Disable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#disableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be disabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    disableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Updates all {@link Raycaster.Map Raycaster.Map} dynamic maps. Fired on Phaser.Scene update event.\r\n    *\r\n    * @method Raycaster#update\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    update: function() {\r\n        //update dynamic maps\r\n        let dynamicMaps = 0;\r\n        if(this.mappedObjects.length > 0) {\r\n            for(let mapppedObject of this.mappedObjects) {\r\n                let map;\r\n\r\n                if(mapppedObject.type === 'body' || mapppedObject.type === 'composite') {\r\n                    map = mapppedObject.raycasterMap;\r\n                }\r\n                else if(mapppedObject.data) {\r\n                    map = mapppedObject.data.get('raycasterMap');\r\n                }\r\n\r\n                if(!map)\r\n                    continue;\r\n\r\n                if(map.dynamic) {\r\n                    map.updateMap();\r\n                    dynamicMaps++;\r\n                }\r\n            }\r\n\r\n            //update stats\r\n            this._stats.mappedObjects.static = this.mappedObjects.length - dynamicMaps;\r\n            this._stats.mappedObjects.dynamic = dynamicMaps;\r\n\r\n            //debug\r\n            if(this.debugOptions.enabled)\r\n                this.drawDebug();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Create {@link Raycaster.Ray Raycaster.Ray} object.\r\n    *\r\n    * @method Raycaster#createRay\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Ray options:\r\n    *\r\n    * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n    */\r\n    createRay: function(options = {}) {\r\n        return new this.Ray(options, this);\r\n    },\r\n\r\n    /**\r\n    * Get raycaster statistics.\r\n    *\r\n    * @method Raycaster#getStats\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.10.0\r\n    *\r\n    * @return {object} Raycaster statistics.\r\n    */\r\n    getStats: function() {\r\n        return this._stats;\r\n    },\r\n\r\n    /**\r\n    * Draw maps in debug mode\r\n    *\r\n    * @method Raycaster#drawDebug\r\n    * @memberof Raycaster\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n     drawDebug: function() {\r\n        if(this.graphics === undefined || !this.debugOptions.enabled)\r\n            return this;\r\n\r\n        //clear\r\n        this.graphics.clear();\r\n\r\n        if(!this.debugOptions.maps)\r\n            return this;\r\n\r\n        for(let object of this.mappedObjects)\r\n        {\r\n            let map;\r\n        \r\n            if(object.type === 'body' || object.type === 'composite')\r\n                map = object.raycasterMap;\r\n            else\r\n                map = object.data.get('raycasterMap');\r\n            \r\n            if(!map)\r\n                continue;\r\n\r\n            //draw bounding box\r\n            if(this.debugOptions.graphics.mapBoundingBox) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapBoundingBox);\r\n                this.graphics.strokeRectShape(map.getBoundingBox());\r\n            }\r\n\r\n            //draw segments\r\n            if(this.debugOptions.graphics.mapSegment) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapSegment);\r\n                for(let segment of map.getSegments()) {\r\n                    this.graphics.strokeLineShape(segment);\r\n                }\r\n            }\r\n\r\n            //draw points\r\n            if(this.debugOptions.graphics.mapPoint) {\r\n                this.graphics.fillStyle(this.debugOptions.graphics.mapPoint);\r\n                for(let point of map.getPoints()) {\r\n                    this.graphics.fillPoint(point.x, point.y, 3)\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRaycaster.prototype.Map = require('./map/map-core.js').Map;\r\nRaycaster.prototype.Ray = require('./ray/ray-core.js').Ray;\r\n","/**\n * @classdesc\n *\n * Map class responsible for mapping game objects.\n *\n * @namespace Raycaster.Map\n * @class Raycaster.Map\n * @constructor\n * @since 6.0.0\n *\n * @param {object} options - Map specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Map(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Map#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.9.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Mapped object's type\n    *\n    * @name Raycaster.Map#type\n    * @type {string}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.type;\n    /**\n    * If set true, map will be tested by ray. Otherwise it will be ignored.\n    *\n    * @name Raycaster.Map#active\n    * @type {boolean}\n    * @default true\n    * @since 0.7.2\n    */\n    this.active;\n    /**\n    * If set true, map will be automatically updated on scene update event.\n    *\n    * @name Raycaster.Map#dynamic\n    * @type {boolean}\n    * @default false\n    * @since 0.6.0\n    */\n    this.dynamic;\n    /**\n    * If set true, map will be treated by ray as circle. Set automaticalyy on map update.\n    *\n    * @name Raycaster.Map#circle\n    * @type {boolean}\n    * @default false\n    * @since 0.9.0\n    */\n    this.circle = false;\n    /**\n    * Reference to mapped object.\n    *\n    * @name Raycaster.Map#object\n    * @type {object}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.object;\n    /**\n    * Array of mapped object's vertices used as rays targets.\n    *\n    * @name Raycaster.Map#_points\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._points = [];\n    /**\n    * Array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @name Raycaster.Map#_segments\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._segments = [];\n    /**\n    * Get array of mapped object's vertices used as rays targets.\n    *\n    * @method Raycaster.Map#getPoints\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycatser.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Point[]} Array of mapped object's vertices.\n    */\n    this.getPoints;\n    /**\n    * Get array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @method Raycaster.Map#getSegments\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycatser.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Line[]} Array of mapped object's segments.\n    */\n    this.getSegments;\n    /**\n    * Get mapped object's bounding box.\n    *\n    * @method Raycaster.Map#getBoundingBox\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.9.0\n    *\n    * @return {Phaser.Geom.Rectangle} Mapped object's bounding box.\n    */\n    this.getBoundingBox;\n    /**\n    * Update object's map of points and segments.\n    *\n    * @method Raycaster.Map#updateMap\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n    */\n    this.updateMap;\n\n    this.config(options);\n    this.updateMap();\n\n    return this;\n};\n\nMap.prototype = {\n    config: require('./config.js').config\n};\n\nMap.prototype.constructor = Map;\n","let rectangle = require('./map-rectangle-methods.js');\nlet line = require('./map-line-methods.js');\nlet polygon = require('./map-polygon-methods.js');\nlet arc = require('./map-circle-methods.js');\nlet container = require('./map-container-methods.js');\nlet tilemap = require('./map-tilemap-methods.js');\nlet matterBody = require('./map-matterBody-methods.js');\nlet segmentCount = require('./segmentsCount.js');\nlet boundingBox = require('./boundingBox.js');\n\n/**\n * Configure map.\n *\n * @method Raycaster.Map#config\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Map's congfiguration options. May include:\n * @param {object} options.object - Game object to map\n * @param {string} [options.type] - Map type. If not defined, it will be determined based on object.\n * @param {boolean} [options.dynamic = false] - If set true, map will be dynamic (updated on scene update event).\n * @param {boolean} [options.active = true] - If set true, map will be active (will provide points, segments and will be updated).\n * @param {integer} [options.segmentCount] - Circle map's segment count. If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n * @param {boolean} [options.forceConvex] - If set true, matter body map will use convex body (hull) for non-covex bodies.\n * @param {boolean} [options.forceVerticesMapping] - If set true, matter body map will use only vertices for mapping circle bodies.\n * \n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //object type\n    if(options.type === undefined)\n        options.type = options.object.type;\n    if(options.type === 'body' || options.type === 'composite')\n        options.type = 'MatterBody';\n    this.type = options.type;\n    \n    switch(options.type) {\n        case 'Polygon':\n            this.getPoints = polygon.getPoints;\n            this.getSegments = polygon.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = polygon.updateMap;\n            break;\n        case 'Arc':\n            //circle segments count\n            this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\n            this.circle = (options.segmentCount) ? false : true;\n            this.getPoints = arc.getPoints;\n            this.getSegments = arc.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = arc.updateMap;\n            this.setSegmentCount = segmentCount.setSegmentCount;\n            break;\n        case 'Line':\n            this.getPoints = line.getPoints;\n            this.getSegments = line.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = line.updateMap;\n            break;\n        case 'Container':\n            this.getPoints = container.getPoints;\n            this.getSegments = container.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = container.updateMap;\n            break;\n        case 'StaticTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'DynamicTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'TilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'MatterBody':\n            //force convex body (hull) mapping\n            this.forceConvex = (options.forceConvex) ? true : false;\n            //force mapping by vertices\n            this.forceVerticesMapping = (options.forceVerticesMapping) ? true : false;\n            this.circle = false;\n            this.getPoints = matterBody.getPoints;\n            this.getSegments = matterBody.getSegments;\n            this.getBoundingBox = matterBody.getBoundingBox;\n            this.updateMap = matterBody.updateMap;\n            break;\n        default:\n            this.getPoints = rectangle.getPoints;\n            this.getSegments = rectangle.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = rectangle.updateMap;\n    }\n\n    //dynamic map\n    this.dynamic = (options.dynamic == true) ? true : false;\n\n    //enable/disable map\n    this.active = (options.active !== undefined) ? options.active : true;\n\n    return this;\n}\n","/*Map methods for rectangles*/\n/**\n* Get array of mapped rectangle's vertices used as rays targets.\n*\n* @method Raycaster.Map#rectangle.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped rectangle's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#rectangle.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update rectangle's map of points and segments.\n*\n* @method Raycaster.Map#rectangle.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n        \n    let points = [];\n    let segments = [];\n\n    //set points\n    points = [\n        this.object.getTopLeft(),\n        this.object.getTopRight(),\n        this.object.getBottomRight(),\n        this.object.getBottomLeft()\n    ];\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for lines*/\n/**\n* Get array of mapped line's vertices used as rays targets.\n*\n* @method Raycaster.Map#line.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped line's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#line.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update line's map of points and segments.\n*\n* @method Raycaster.Map#line.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    let pointA = this.object.geom.getPointA();\n    let pointB = this.object.geom.getPointB();\n\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n        pointA = vectorA.getPointB();\n\n        let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n        pointB = vectorB.getPointB();\n\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x, pointA.y));\n        points.push(new Phaser.Geom.Point(pointB.x, pointB.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y));\n    }\n    //if rotation === 0\n    else {\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y));\n        points.push(new Phaser.Geom.Point(pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y, pointB.x + offset.x * this.object.scaleX, pointB.y * this.object.scaleY + offset.y));\n    }\n    \n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for polygons*/\n/**\n* Get array of mapped polygon's vertices used as rays targets.\n*\n* @method Raycaster.Map#polygon.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped polygon's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#polygon.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update polygon's map of points and segments.\n*\n* @method Raycaster.Map#polygon.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        for(let point of this.object.geom.points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            points.push(vector.getPointB());\n        }\n    }\n    //if rotation === 0\n    else {\n        for(let point of this.object.geom.points) {\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y));\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));   \n    }\n    //if polygon is closed\n    if(this.object.closePath) {\n        let last = points.length - 1;\n        segments.push(new Phaser.Geom.Line(points[last].x, points[last].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for circles*/\n/**\n* Get array of mapped circle's vertices used as rays targets.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll calculatoe tangent points for passed ray.\n*\n* @method Raycaster.Map#arc.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    if(this._points.length > 0)\n        return this._points;\n    \n    let points = [];\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * (this.object.originX - 0.5);\n    offset.y = this.object.y - this.object.displayHeight * (this.object.originY - 0.5);\n\n    //calculate tangent rays\n    if(ray) {\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c;\n        \n        let rotation = this.object.rotation;\n        \n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, offset.x, offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            let cB = vector.getPointB();\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, cB.x, cB.y);\n        }\n        else { \n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, offset.x, offset.y);\n        }\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(this.object.radius * this.object.scaleX, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((this.object.radius * this.object.scaleX) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped circle's segments used to test object's intersection with ray.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll return empty array.\n*\n* @method Raycaster.Map#arc.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update circles's map of points and segments.\n*\n* @method Raycaster.Map#arc.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    if(!this.segmentCount) {\n        this._points = [];\n        this._segments = [];\n        return this;\n    }\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX + this.object.radius * this.object.scaleX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY + this.object.radius * this.object.scaleY;\n\n    //get points surrounding circle\n    let points = this.object.geom.getPoints(this.segmentCount);\n    let segments = []\n\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let newPoints = [];\n        for(let point of points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, this.object.x + (point.x + this.object.radius) * this.object.scaleX, this.object.y + (point.y + this.object.radius) * this.object.scaleY);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            newPoints.push(vector.getPointB());\n        }\n        points = newPoints;\n    }\n    //if rotation === 0\n    else {\n        for(let point of points) {\n            point.x = point.x * this.object.scaleX + offset.x;\n            point.y = point.y * this.object.scaleY + offset.y;\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for containers*/\n/**\n* Get array of mapped container's and its children vertices used as rays targets.\n*\n* @method Raycaster.Map#container.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false, getCircles = false) {\n    if(!this.active)\n        return [];\n\n    let points = [];\n    if(!getCircles)\n        points = this._points;\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    //get tangent points of container's circles\n    if(ray){\n        //create temporary ray\n        let vector = new Phaser.Geom.Line(0, 0, ray.origin.x - offset.x, ray.origin.y - offset.y);\n        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) - this.object.rotation, Phaser.Geom.Line.Length(vector));\n\n        let tempRay = ray._raycaster.createRay({\n            origin: {\n                x: vector.getPointB().x,\n                y: vector.getPointB().y\n            }\n        });\n\n        for(let child of this.object.list){\n            if(child.type === 'Arc'){\n\n                let map = child.data.get('raycasterMap');\n                if(map._points.length == 0){\n                    for(let point of map.getPoints(tempRay, true)){\n                        let vector = new Phaser.Geom.Line(0, 0, point.x, point.y);\n                        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\n\n                        points.push(new Phaser.Geom.Point(vector.getPointB().x + offset.x, vector.getPointB().y + offset.y));\n                    }\n                }\n            }\n            else if(child.type === 'Container') {\n                for(let point of child.data.get('raycasterMap').getPoints(tempRay, true)){\n                    if(this.object.rotation !== 0) {\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\n                        points.push(vector.getPointB());\n                    }\n                    //if rotation === 0\n                    else\n                        points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleX + offset.y));\n                }\n            }\n\n        }\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped container's and its children segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#container.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n\n    return this._segments;\n};\n\n/**\n* Update container's and its children maps of points and segments.\n*\n* @method Raycaster.Map#container.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let container = this.object;\n\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    let rotation = container.rotation;\n\n    //iterate through container's children\n    container.iterate(function(child){\n        if(!child.data)\n            child.setDataEnabled();\n\n        //get child map\n        let map = child.data.get('raycasterMap');\n        if(!map) {\n            map = new this.constructor({\n                object: child,\n                segmentCount: this.segmentCount\n            });\n            child.data.set('raycasterMap', map);\n        }\n        else\n            map.updateMap();\n\n        //add child points\n        let childPoints = [];\n        for(let point of map.getPoints()) {\n            //calculate positions after container's rotation\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                points.push(vector.getPointB());\n            }\n            //if rotation === 0\n            else\n                points.push(new Phaser.Geom.Point(point.x * container.scaleX + offset.x, point.y * container.scaleX + offset.y));\n\n            childPoints.push(points[points.length - 1])\n        }\n\n        //add child segments\n        for(let segment of map.getSegments()) {\n            //calculate positions after container's rotation\n            if(rotation !== 0) {\n                let pointA = segment.getPointA();\n                let pointB = segment.getPointB();\n                let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n                let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n                Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n                Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n\n                segments.push(new Phaser.Geom.Line(vectorA.getPointB().x, vectorA.getPointB().y, vectorB.getPointB().x, vectorB.getPointB().y));\n            }\n            //if rotation === 0\n            else\n                segments.push(new Phaser.Geom.Line(segment.getPointA().x * container.scaleX + offset.x, segment.getPointA().y * container.scaleY + offset.y, segment.getPointB().x * container.scaleX + offset.x, segment.getPointB().y * container.scaleY + offset.y));\n        }\n\n    }.bind(this));\n\n    //get children intersections\n    for(let i = 0, iLength = container.list.length; i < iLength; i++){\n        let childA = container.list[i];\n        let mapA = childA.data.get('raycasterMap');\n\n        for(let j = i+1, jLength = container.list.length; j < jLength; j++){\n            let childB = container.list[j];\n            let mapB = childB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(childA.getBounds(), childB.getBounds()))\n                continue;\n\n            //find objects intersections\n            for(let segmentA of mapA.getSegments()) {\n                for(let segmentB of mapB.getSegments()) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    \n                     //calculate positions after container's rotation\n                    if(rotation !== 0) {\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, intersection.x * this.object.scaleX + offset.x, intersection.y * this.object.scaleY + offset.y);\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                        points.push(vector.getPointB());\n                    }\n                    //if rotation === 0\n                    else\n                        points.push(new Phaser.Geom.Point(intersection.x * container.scaleX + offset.x, intersection.y * container.scaleX + offset.y));\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for tilemaps*/\n/**\n* Get array of mapped tilemap's vertices used as rays targets.\n*\n* @method Raycaster.Map#tilemap.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._points;\n\n    let points = [];\n    for(let point of this._points) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, point.x, point.y) <= ray.detectionRange)\n            points.push(point);\n    }\n\n    //get intersections between tilemap's segments and ray's detection range edge\n    let segments = this.getSegments(ray);\n\n    for(let segment of segments) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x1, segment.y1) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x1, segment.y1));\n        \n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x2, segment.y2) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x2, segment.y2));\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped tilemap's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#tilemap.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._segments;\n\n    let segments = [];\n    for(let segment of this._segments) {\n        if(Phaser.Geom.Intersects.LineToCircle(segment, ray.detectionRangeCircle)) {\n            segments.push(segment);\n        }\n    }\n\n    return segments;\n};\n\n/**\n* Update tilemap's map of points and segments.\n*\n* @method Raycaster.Map#tilemap.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x;\n    offset.y = this.object.y;\n\n    let horizontal = false;\n    let horizontals = [];\n    let verticals = [];\n\n    //iterate rows\n    for(let i = 0, iLength = this.object.layer.data.length; i < iLength; i++) {\n        let row = this.object.layer.data[i];\n\n        //iterate row's tiles\n        for(let j = 0, jLength = row.length; j < jLength; j++) {\n            let tile = row[j];\n\n            //check if tile and its top and left neighbours have different are from different sets (rays blocking and non-bloking)\n            let upperEdge = ((i > 0 && this.collisionTiles.includes(this.object.layer.data[i-1][j].index) != this.collisionTiles.includes(tile.index)) || (i == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n            let leftEdge = ((j > 0 && this.collisionTiles.includes(this.object.layer.data[i][j-1].index) != this.collisionTiles.includes(tile.index)) || (j == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n\n            //get current tile's column last vertical line\n            let vertical = false;\n            if(verticals.length <= j)\n                verticals[j] = [];\n            else if(verticals[j].length > 0)\n                vertical = verticals[j][verticals[j].length - 1];\n\n            //check if tile has edge from left\n            if(leftEdge) {\n                if(vertical && vertical.y + vertical.height == i)\n                    vertical.height++;\n                else {\n                    verticals[j].push({\n                        x: tile.x,\n                        y: tile.y,\n                        height: 1\n                    });\n                }\n            }\n\n            //check if tile has edge from top\n            if(upperEdge) {\n                if(horizontal)\n                    horizontal.width++;\n                else\n                    horizontal = {\n                        x: tile.x,\n                        y: tile.y,\n                        width: 1\n                    };\n                continue;\n            }\n\n            if(horizontal) {\n                let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n                let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n                let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n                segments.push(segment);\n                horizontals.push(segment);\n                points.push(new Phaser.Geom.Point(x, y));\n                points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n                horizontal = false;\n            }\n        }\n        \n        //at the end of row add segment if exist\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add bottom horizontal segments\n    for(let tile of this.object.layer.data[this.object.layer.data.length - 1]) {\n        if(this.collisionTiles.includes(tile.index)) {\n            if(horizontal)\n                horizontal.width++;\n            else\n                horizontal = {\n                    x: tile.x,\n                    y: tile.y + 1,\n                    width: 1\n                };\n            continue;\n        }\n\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add segment if exist\n    if(horizontal) {\n        let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n        let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n        let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n        segments.push(segment);\n        horizontals.push(segment);\n        points.push(new Phaser.Geom.Point(x, y));\n        points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n        horizontal = false;\n    }\n    \n    //add right vertical segments\n    let vertical = false;\n    let verticalsLastColumn = [];\n    for(let row of this.object.layer.data) {\n        let tile = row[row.length - 1];\n\n        //if tile blocks ray\n        if(this.collisionTiles.includes(tile.index)) {\n            if(vertical) {\n                vertical.height++;\n            }\n            else {\n                vertical = {\n                    x: tile.x + 1,\n                    y: tile.y,\n                    height: 1\n                };\n            }\n\n            continue;\n        }\n\n        if(vertical) {\n            verticalsLastColumn.push(vertical);\n            vertical = false;\n        }\n    }\n\n    verticals.push(verticalsLastColumn);\n    \n    //add vertical segments\n    for(let column of verticals) {\n        if(!column)\n            continue;\n\n        for(let vertical of column) {\n            let x = vertical.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y1 = vertical.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let y2 = y1 + this.object.layer.tileHeight * this.object.scaleY * vertical.height;\n            let segment = new Phaser.Geom.Line(x, y1, x, y2)\n            segments.push(segment);\n\n            //add points if they're not already there\n            if(!points.filter(point => point.x == x && point.y == y1))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            if(!points.filter(point => point.x == x && point.y == y2))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            //get intersections between horizontal segments and vertical\n            for(let horizontalSegment of horizontals) {\n                if(segment.x1 == horizontalSegment.x1 || segment.x1 == horizontalSegment.x2 || segment.x2 == horizontalSegment.x1 || segment.x2 == horizontalSegment.x2)\n                    continue;\n\n                if(segment.y1 == horizontalSegment.y1 || segment.y1 == horizontalSegment.y2 || segment.y2 == horizontalSegment.y1 || segment.y2 == horizontalSegment.y2)\n                    continue;\n\n                let point = new Phaser.Geom.Point();\n                if(Phaser.Geom.Intersects.LineToLine(segment, horizontalSegment, point)) {\n                    points.push(point);\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n\n/**\n* Set tile types which should be mapped (for Phaser.Tilemaps.StaticTilemapLayer and Phaser.Tilemaps.DynamicTilemapLayer maps only).\n*\n* @method Raycaster.Map#setCollisionTiles\n* @memberof Raycaster.Map\n* @instance\n* @since 0.7.3\n*\n* @param {array} [tiles = []] - Set of tile's indexes to map.\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function setCollisionTiles(tiles = []) {\n    this.collisionTiles = tiles;\n    return this;\n}\n","/*Map methods for matter body*/\n/**\n* Get array of mapped matter body's vertices used as rays targets.\n*\n* @method Raycaster.Map#matterBody.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n\n    //calculate tangent rays\n    if(ray && !this.forceVerticesMapping && body.circleRadius > 0) {\n        let points = [];\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, body.position.x, body.position.y);\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(body.circleRadius * body.scale.x, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((body.circleRadius * body.scale.x) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n\n        return points;\n    }\n\n    return this._points;\n};\n\n/**\n* Get array of mapped matter body's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#matterBody.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update matter body's map of points and segments.\n*\n* @method Raycaster.Map#matterBody.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n    let bodies = [body];\n    let generateBounds = false;\n\n    if(body.circleRadius > 0 && !this.forceVerticesMapping) {\n        this.circle = true;\n        this._points = points;\n        this._segments = segments;\n\n        return this;\n    }\n\n    this.circle = false;\n\n    if(body.type == 'composite')\n        bodies = body.bodies;\n\n    if( ( body.bounds === undefined && body.type == 'composite' ) || ( body.type == 'composite' && this.dynamic ) ) {\n        generateBounds = true;\n    }\n    \n    for(let bodyItem of bodies) {\n        //if convex body\n        if(bodyItem.parts.length === 1 || this.forceConvex) {\n            let vertices = bodyItem.parts[0].vertices;\n\n            points.push(new Phaser.Geom.Point(vertices[0].x, vertices[0].y));\n\n            for(let i = 1, length = vertices.length; i < length; i++) {\n                let pointA = new Phaser.Geom.Point(vertices[i - 1].x, vertices[i - 1].y);\n                let pointB = new Phaser.Geom.Point(vertices[i].x, vertices[i].y);\n\n                points.push(pointB);\n\n                //add segment\n                let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                segments.push(segment);\n            }\n\n            //closing segment\n            let segment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n            segments.push(segment);\n        }\n\n        //if concave body\n        else if(bodyItem.parts.length > 1) {\n            for(let i = 1, length = bodyItem.parts.length; i < length; i++) {\n                let vertices = bodyItem.parts[i].vertices;\n                let pointA = new Phaser.Geom.Point(vertices[0].x, vertices[0].y);\n\n                if(points.find(point => point.x == pointA.x && point.y == pointA.y) === undefined)\n                    points.push(pointA);\n\n                for(let j = 1, length = vertices.length; j < length; j++) {\n                    let pointB = new Phaser.Geom.Point(vertices[j].x, vertices[j].y);\n                    //check if segment was already added\n                    let segmentIndex = segments.findIndex(segment => (segment.x1 == pointA.x && segment.y1 == pointA.y && segment.x2 == pointB.x && segment.y2 == pointB.y) || (segment.x1 == pointB.x && segment.y1 == pointB.y && segment.x2 == pointA.x && segment.y2 == pointA.y));\n                    \n                    if(segmentIndex !== -1) {\n                        segments.splice(segmentIndex, 1);\n                        pointA = pointB;\n                        continue;\n                    }\n                    \n                    if(points.find(point => point.x == pointB.x && point.y == pointB.y) === undefined)\n                        points.push(pointB);\n\n                    //add segment\n                    let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                    segments.push(segment);\n                    \n                    pointA = pointB;\n                }\n                \n                //closing segment\n                let closingSegment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n\n                let segmentIndex = segments.findIndex(segment => (segment.x1 == closingSegment.x1 && segment.y1 == closingSegment.y1 && segment.x2 == closingSegment.x2 && segment.y2 == closingSegment.y2) || (segment.x1 == closingSegment.x2 && segment.y1 == closingSegment.y2 && segment.x2 == closingSegment.x1 && segment.y2 == closingSegment.y1));\n                if(segmentIndex === undefined)\n                    segments.push(closingSegment);\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    if(generateBounds) {\n        let bounds = this._raycaster.scene.matter.composite.bounds(body);\n        body.bounds = bounds;\n    }\n\n    return this;\n};\n\n/**\n* Get matter body's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Matter body's bounding box.\n*/\nexport function getBoundingBox() {\n    let bounds = this.object.type === 'body' || this.object.type === 'composite' ? this.object.bounds : this.object.body.bounds;\n\n    return new Phaser.Geom.Rectangle(bounds.min.x, bounds.min.y, bounds.max.x - bounds.min.x, bounds.max.y - bounds.min.y);\n}\n\n","/**\n * Set segment count for cirle's map.\n * If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n *\n * @method Raycaster.Map#setSegmentCount\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {integer} count - Circle map's segment count.\n *\n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function setSegmentCount(count) {\n    this.segmentCount = count;\n    this.circle = count ? false : true;\n\n    this.updateMap();\n    return this;\n}\n","/**\n* Get mapped object's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Mapped object's bounding box.\n*/\nexport function getBoundingBox() {\n    return this.object.getBounds();\n}\n","/**\n * @classdesc\n *\n * Ray class responsible for casting ray's and testing their collisions with mapped objects.\n *\n * @namespace Raycaster.Ray\n * @class Raycaster.Ray\n * @constructor\n * @since 6.0.0\n *\n * @param {object} options - Ray specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Ray(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Ray#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.6.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Ray's source position.\n    *\n    * @name Raycaster.Ray#origin\n    * @type {Phaser.Geom.Point}\n    * @since 0.6.0\n    */\n    this.origin = new Phaser.Geom.Point();\n    /**\n    * Ray's representation used to calculating intersections.\n    *\n    * @name Raycaster.Ray#_ray\n    * @type {Phaser.Geom.Line}\n    * @private\n    * @since 0.6.0\n    */\n    this._ray = new Phaser.Geom.Line();\n    /**\n    * Ray's angle in radians.\n    *\n    * @name Raycaster.Ray#angle\n    * @type {float}\n    * @default 0\n    * @since 0.6.0\n    */\n    this.angle = 0;\n    /**\n    * Ray's cone width angle in radians.\n    *\n    * @name Raycaster.Ray#cone\n    * @type {float}\n    * @default 0\n    * @since 0.7.0\n    */\n    this.cone = 0;\n    /**\n    * Ray's maximum range\n    *\n    * @name Raycaster.Ray#rayRange\n    * @type {integer}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.6.0\n    */\n    this.rayRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * Ray's maximum detection range. Objects outside detection range won't be tested.\n    * Ray tests all objects when set to 0.\n    *\n    * @name Raycaster.Ray#detectionRange\n    * @type {integer}\n    * @default\n    * @since 0.6.0\n    */\n    this.detectionRange = 0;\n    /**\n    * Ray's representation of detection range used in calculating if objects are in range.\n    *\n    * @name Raycaster.Ray#detectionRangeCircle\n    * @type {Phaser.Geom.Circle}\n    * @private\n    * @since 0.6.0\n    */\n    this.detectionRangeCircle = new Phaser.Geom.Circle();\n    /**\n    * Ray's maximum collision range of ray's field of view. Radius of {@link Raycaster.Ray#collisionRangeCircle Ray.body}.\n    *\n    * @name Raycaster.Ray#collisionRange\n    * @type {integer}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.8.0\n    */\n    this.collisionRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n    *\n    * @name Raycaster.Ray#ignoreNotIntersectedRays\n    * @type {boolean}\n    * @default true\n    * @since 0.6.0\n    */\n    this.ignoreNotIntersectedRays = true;\n    /**\n    * If set true, ray's hit points will be rounded.\n    *\n    * @name Raycaster.Ray#round\n    * @type {boolean}\n    * @default false\n    * @since 0.8.1\n    */\n    this.round = false;\n    /**\n    * If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n    *\n    * @name Raycaster.Ray#autoSlice\n    * @type {boolean}\n    * @default false\n    * @since 0.8.0\n    */\n    this.autoSlice = false;\n    /**\n    * Array of intersections from last raycast representing field of view.\n    *\n    * @name Raycaster.Ray#intersections\n    * @type {object[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.intersections = [];\n    /**\n    * Array of triangles representing slices of field of view from last raycast.\n    *\n    * @name Raycaster.Ray#slicedIntersections\n    * @type {Phaser.Geom.Triangle[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.slicedIntersections = [];\n\n    /**\n    * Physics body for testing field of view collisions.\n    *\n    * @name Raycaster.Ray#body\n    * @type {object}\n    * @default undefined\n    * @since 0.8.0\n    */\n    //this.body = false;\n    /**\n    * Physics body type.\n    *\n    * @name Raycaster.Ray#bodyType\n    * @type {(bolean|'arcade'|'matter')}\n    * @default false\n    * @since 0.9.0\n    */\n    this.bodyType = false;\n\n    /**\n    * Ray casting stats.\n    *\n    * @name Raycaster.Ray#_stats\n    * @type {object}\n    * @private\n    * @since 0.10.0\n    * \n    * @property {string} method Used casting method (cast, castCircle, castCone).\n    * @property {number} rays Casted rays.\n    * @property {number} testedMappedObjects Tested mapped objects.\n    * @property {number} hitMappedObjects Hit mapped objects.\n    * @property {number} segments Tested segments.\n    * @property {number} time Casting time.\n    */\n    this._stats = {\n        method: 'cast',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    /**\n    * Ray's graphics object used for debug\n    *\n    * @name Raycaster.Ray#graphics\n    * @type {Phaser.GameObjects.Graphics}\n    * @private\n    * @since 0.10.0\n    */\n     this.graphics;\n\n    this.config(options);\n};\n\nRay.prototype = {\n    config: require('./config.js').config,\n    getStats: require('./stats.js').getStats,\n    setRay: require('./ray.js').setRay,    \n    setOrigin: require('./origin.js').setOrigin,\n    setRayRange: require('./range.js').setRayRange,\n    setAngle: require('./angle.js').setAngle,\n    setAngleDeg: require('./angle.js').setAngleDeg,\n    setCone: require('./cone.js').setCone,\n    setConeDeg: require('./cone.js').setConeDeg,\n    setDetectionRange: require('./range.js').setDetectionRange,\n    boundsInRange: require('./range.js').boundsInRange,\n    cast: require('./cast.js').cast,\n    castCircle: require('./castCircle.js').castCircle,\n    castCone: require('./castCone.js').castCone,\n    slice: require('./slice.js').slice,\n    setCollisionRange: require('./range.js').setCollisionRange,\n    enablePhysics: require('./enablePhysics.js').enablePhysics,\n    overlap: require('./overlap.js').overlap,\n    processOverlap: require('./overlap.js').processOverlap,\n    testArcadeOverlap: require('./overlap.js').testArcadeOverlap,\n    testMatterOverlap: require('./overlap.js').testMatterOverlap,\n    setCollisionCategory: require('./matter-physics-methods.js').setCollisionCategory,\n    setCollisionGroup: require('./matter-physics-methods.js').setCollisionGroup,\n    setCollidesWith: require('./matter-physics-methods.js').setCollidesWith,\n    setOnCollide: require('./matter-physics-methods.js').setOnCollide,\n    setOnCollideEnd: require('./matter-physics-methods.js').setOnCollideEnd,\n    setOnCollideActive: require('./matter-physics-methods.js').setOnCollideActive,\n    setOnCollideWith: require('./matter-physics-methods.js').setOnCollideWith,\n    drawDebug: require('./debug.js').drawDebug\n};\n","/**\n * Configure ray.\n *\n * @method Raycaster.Ray#config\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Ray's congfiguration options. May include:\n * @param {Phaser.Geom.Point} [options.origin = {x:0, y:0}] - Ray's position.\n * @param {float} [options.angle = 0] - Ray's angle in radians.\n * @param {float} [options.angleDeg = 0] - Ray's angle in degrees.\n * @param {float} [options.cone = 0] - Ray's cone angle in radians.\n * @param {float} [options.coneDeg = 0] - Ray's cone angle in degrees.\n * @param {integer} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n * @param {integer} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\n * @param {integer} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\n * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\n * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //origin\n    if(options.origin !== undefined)\n        this.origin.setTo(options.origin.x, options.origin.y);\n\n    //angle\n    if(options.angle !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(options.angle);\n\n    //angle deg\n    if(options.angleDeg !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(options.angleDeg));\n\n    //cone angle\n    if(options.cone !== undefined)\n        this.cone = options.cone;\n\n    //cone angle deg\n    if(options.coneDeg !== undefined)\n        this.cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //ray range (0 = max)\n    if(options.rayRange !== undefined)\n        this.rayRange = options.rayRange;\n\n    //collision range (0 = max)\n    if(options.collisionRange !== undefined)\n        this.collisionRange = options.collisionRange;\n\n    //detection range (0 = max)\n    if(options.detectionRange !== undefined)\n        this.detectionRange = options.detectionRange;\n\n    //ignore not intersected rays\n    if(options.ignoreNotIntersectedRays !== undefined)\n        this.ignoreNotIntersectedRays = (options.ignoreNotIntersectedRays == true)\n    \n    //round\n    if(options.round !== undefined)\n        this.round = (options.round == true)\n\n    //auto slice\n    if(options.autoSlice !== undefined)\n        this.autoSlice = (options.autoSlice == true)\n\n    //enable physics\n    if(options.enablePhysics !== undefined && options.enablePhysics)\n        this.enablePhysics(options.enablePhysics);\n    \n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this._raycaster.debugOptions.enabled && this._raycaster.scene !== undefined) {\n        this.graphics =  this._raycaster.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\n        this.graphics.setDepth(1000);\n    }\n\n    return this;\n}\n","/**\r\n * Get ray statistics for last casting. Stats include\r\n * * number of casted rays,\r\n * * number of tested mapped objects,\r\n * * number of tested map segments.\r\n * * casting time\r\n *\r\n * @method Raycaster.Ray#getStats\r\n * @memberof Raycaster.Ray\r\n * @instance\r\n * @since 0.10.0\r\n *\r\n * @return {object} Statisticss from last casting.\r\n */\r\n export function getStats() {\r\n     return this._stats;\r\n }\r\n","/**\n * Set ray's position, direction (angle) and range.\n *\n * @method Raycaster.Ray#setRay\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n * @param {float} [angle] - Ray's angle in radians.\n * @param {integer} [range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRay(x, y, angle, rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.origin.setTo(x, y);\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    this.rayRange = rayRange;\n\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y, this.detectionRange);\n    return this;\n}\n","/**\n * Set ray's source position.\n *\n * @method Raycaster.Ray#setOrigin\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOrigin(x, y) {\n    this.origin.setTo(x, y);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this.bodyType === 'matter' && this.collisionRange !== Phaser.Math.MAX_SAFE_INTEGER) {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n    else if(this.bodyType === 'arcade') {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n\n    return this;\n}\n","/**\n * Cast ray to find closest intersection with tested mapped objects.\n *\n * @method Raycaster.Ray#cast\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = {Raycaster#mappedObjects}] - Array of game objects to test. If not provided test all mapped game objects.\n * @param {Phaser.Geom.Point} [options.target] - Ray's target point. Used in other casting methods to determine if ray was targeting mapped objects point.\n * @param {boolean} [options.internal = false] - Flag determining if method is used by other casting method.\n *\n * @return {(Phaser.Geom.Point|boolean)} Ray's closest intersection with tested objects. Returns false if no intersection has been found. Additionally contains reference to hit mapped object and segment if available.\n */\nexport function cast(options = {}) {\n    let closestIntersection;\n    let closestSegment;\n    let closestObject;\n    let closestDistance = this.rayRange;\n    let internal = options.internal ? options.internal : false;\n    let startTime = performance.now();\n    let stats = {\n        method: 'cast',\n        rays: 1,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if bounding box is defined check bounding box intersection\n    if(this._raycaster && this._raycaster.boundingBox) {\n        let intersections = [];\n        Phaser.Geom.Intersects.GetLineToRectangle(this._ray, this._raycaster.boundingBox.rectangle, intersections);\n        if(intersections.length === 1)\n            closestIntersection = intersections[0];\n        else if(intersections.length > 1) {\n            for(let intersection of intersections) {\n                let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                if(distance < closestDistance) {\n                    closestDistance = distance;\n                    closestIntersection = intersection;\n                }\n            }\n        }\n        //if ray target is declared\n        else if(options.target){\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, options.target.x, options.target.y);\n            //if target is within ray range\n            if(this.rayRange > distance) {\n                closestDistance = distance;\n                closestIntersection = options.target;\n            }\n        }\n    }\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n    \n    for(let object of options.objects) {\n        let map, boundingBox;\n        \n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        stats.testedMappedObjects++;\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        if(internal) {\n            boundingBox = map._boundingBox;\n        }\n        else {\n            boundingBox = map.getBoundingBox();\n            boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n        }\n\n        //check if object is intersected by ray\n        if(Phaser.Geom.Intersects.GetLineToRectangle(this._ray, boundingBox).length === 0)\n            continue;\n\n        stats.hitMappedObjects++;\n        stats.segments += map.getSegments(this).length;\n        \n        //check intersections\n        for(let segment of map.getSegments(this)) {\n            let intersection = [];\n\n            //if target point is segmemt point\n            if(options.target) {\n                if(\n                    Phaser.Geom.Point.Equals(options.target, segment.getPointA())\n                    || Phaser.Geom.Point.Equals(options.target, segment.getPointB())\n                ) {\n                    intersection = options.target;\n                }\n                else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n                    continue;\n            }\n            //if no intersection continue\n            else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n              continue;\n            \n            //get closest intersection\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n            if(distance < closestDistance) {\n                closestDistance = distance;\n                closestIntersection = intersection;\n                closestObject = map.object;\n                closestSegment = segment;\n            }\n        }\n\n        //check if map is circular\n        if(map.circle) {\n           //if circular map has generated points (besides tangent points to ray)\n            if(map._points.length > 0) {\n                continue;\n            }\n            \n            //check if target point is a circle tangent point to ray\n            if(options.target) {\n                let points = map.getPoints(this);\n                let isTangent = false;\n                for(let point of points) {\n\n                    if(Phaser.Geom.Point.Equals(options.target, point)) {\n                        //get closest intersection\n                        let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\n\n                        if(distance < closestDistance) {\n                            closestDistance = distance;\n                            closestIntersection = point;\n                            closestObject = map.object;\n                            isTangent = true;\n                            break;\n                        }\n                    }\n                }\n\n                if(isTangent)\n                    continue;\n            }\n\n            let circleIntersections = [];\n            let offset = new Phaser.Geom.Point();\n            offset.x = map.object.x - map.object.displayWidth * (map.object.originX - 0.5);\n            offset.y = map.object.y - map.object.displayHeight * (map.object.originY - 0.5);\n\n            //calculate circle's center after rotation\n            let rotation = map.object.rotation;\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(map.object.x, map.object.y, offset.x, offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, map.object.x, map.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                let cB = vector.getPointB();\n                offset.x = cB.x;\n                offset.y = cB.y;\n            }\n\n            //create transformed circle\n            let circle = new Phaser.Geom.Circle(offset.x, offset.y, map.object.radius * map.object.scaleX);\n\n            if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\n                for(let intersection of circleIntersections) {\n                    //get closest intersection\n                    let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\n\n                    if(distance < closestDistance) {\n\n                        closestDistance = distance;\n                        closestIntersection = intersection;\n                        closestObject = map.object;\n                    }\n                }\n            }\n        }\n    }\n\n    //update stats\n    if(internal) {\n        this._stats.rays++;\n        this._stats.testedMappedObjects += stats.testedMappedObjects;\n        this._stats.hitMappedObjects += stats.hitMappedObjects;\n        this._stats.segments += stats.segments;\n    }\n    else {\n        stats.time = performance.now() - startTime;\n        this._stats = stats;\n    }\n\n    let result;\n    if(!closestIntersection) {\n        if(this.ignoreNotIntersectedRays)\n            return false;\n\n        result = this._ray.getPointB();\n    }\n    else {\n        result = new Phaser.Geom.Point(closestIntersection.x, closestIntersection.y);\n        result.segment = closestSegment;\n        result.object = closestObject;\n    }\n\n    if(this.round) {\n        result.x = Math.round(result.x);\n        result.y = Math.round(result.y);\n    }\n\n    if(!internal)\n        this.drawDebug([result]);\n    \n    return result;\n}\n","/**\n * Cast ray in all directions to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCircle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCircle(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCircle',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else {\n                mapB = objectB.data.get('raycasterMap');\n            }\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    \n                    rayTargets.push({\n                        point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                        angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y)\n                    });\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angle - b.angle;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n\n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            \n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice();\n\n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Cast ray in a cone to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCone(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let cone = this.cone;\n    let minAngle = 0;\n    let maxAngle = 0;\n    let angleOffset = 0;\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCircle',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //set cone\n    if(options.cone !== undefined)\n        cone = options.cone;\n    if(options.coneDeg !== undefined)\n        cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //set cone min and max angle\n    minAngle = this.angle - cone / 2;\n    maxAngle = this.angle + cone / 2;\n\n    //add min and max angle points\n    this.setAngle(minAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: minAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(-cone / 2)\n    });\n\n    this.setAngle(maxAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: maxAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(cone / 2)\n    });\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: angle,\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y),\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else\n                mapB = objectB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                    let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n                    if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                        rayTargets.push({\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y),\n                            angleOffsetDeg: -angleOffsetDeg\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angleOffsetDeg - b.angleOffsetDeg;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n        \n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice(intersections, false);\n    \n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Slice ray's field of view represented by polygon or array of points into array of triangles.\n *\n * @method Raycaster.Ray#slice\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {(object[]|Phaser.Geom.Polygon)} [fov = {Ray#fov}] - Array of points or polygon representing field of view. If not passed, filed of view from last raycaste will be used.\n * @param {boolean} [closed = true|{Ray#fov}] - Define if field of view polygon is closed (first and last vertices sholud be connected). If fov was not passed, value depends of last type of casting.\n *\n * @return {Phaser.Geom.Triangle[]} Array of triangles representing slices of field of view.\n */\nexport function slice(intersections = this.intersections, closed = true) {\n    //if intersections is Phaser.Geom.Polygon object\n    if(!Array.isArray(intersections)) {\n        if(intersections.type === 4)\n            intersections = intersections.points;\n        else\n            return [];\n    }\n\n    if(intersections.length === 0)\n        return [];\n\n    let slices = [];\n    for(let i = 0, iLength = intersections.length - 1; i < iLength; i++) {\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[i].x, intersections[i].y, intersections[i+1].x, intersections[i+1].y));\n    }\n\n    if(closed)\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[0].x, intersections[0].y, intersections[intersections.length-1].x, intersections[intersections.length-1].y));\n\n    return slices;\n}\n","/**\n * Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. Physics body can be added only once.\n *\n * @method Raycaster.Ray#enablePhysics\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {'arcade'|'matter'} [type = 'arcade'] - Physics type\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function enablePhysics(type = 'arcade') {\n    \n    if(this.body !== undefined)\n        return this;\n\n    this.collisionCircle = this._raycaster.scene.add.circle(this.origin.x, this.origin.y, this.collisionRange);\n    this.collisionCircle._ray = this;\n\n    if(type === 'matter') {\n        this.bodyType = 'matter';\n\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'rectangle', x:bounds.rectangle.centerX, y:bounds.rectangle.centerY, width:bounds.rectangle.width, height:bounds.rectangle.height }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n        else {\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'circle' }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n\n        this.body = this.collisionCircle.body;\n        this.body._ray = this;\n        this.setOnCollideActive();\n    }\n    else {\n        this.bodyType = 'arcade';\n        this._raycaster.scene.physics.add.existing(this.collisionCircle);\n\n        this.body = this.collisionCircle.body;\n        this.body\n            .setCircle(this.collisionRange)\n            .setAllowGravity(false)\n            .setImmovable(true);\n        this.body._ray = this;\n    }\n\n    return this;\n}\n","/**\r\n * Draw rays in debug mode\r\n *\r\n * @method Raycaster.Ray#drawDebug\r\n * @memberof Raycaster\r\n * @private\r\n * @since 0.10\r\n * \r\n * @param {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects.\r\n * \r\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n */\r\nexport function drawDebug(intersections) {\r\n    if(this.graphics === undefined || !this._raycaster.debugOptions.enabled)\r\n        return this;\r\n\r\n    //clear\r\n    this.graphics.clear();\r\n\r\n    if(!this._raycaster.debugOptions.rays)\r\n        return this;\r\n    \r\n    if(this._raycaster.debugOptions.graphics.ray) {\r\n        this.graphics.lineStyle(1, this._raycaster.debugOptions.graphics.ray);\r\n\r\n        for(let intersection of intersections) {\r\n            this.graphics.strokeLineShape({\r\n                x1: this.origin.x,\r\n                y1: this.origin.y,\r\n                x2: intersection.x,\r\n                y2: intersection.y\r\n            });\r\n        }\r\n    }\r\n\r\n    if(this._raycaster.debugOptions.graphics.rayPoint) {\r\n        this.graphics.fillStyle(this._raycaster.debugOptions.graphics.rayPoint);\r\n\r\n        this.graphics.fillPoint(this.origin.x, this.origin.y, 3);\r\n        \r\n        for(let intersection of intersections) {\r\n            this.graphics.fillPoint(intersection.x, intersection.y, 3);\r\n        }\r\n    }\r\n\r\n    return this;\r\n}"],"sourceRoot":""}